.program audio_i2s


; wait until first L-ch
public entry_point:
    mov x, isr
    wait 0 pin, 0 ; LRCK = Low
    wait 1 pin, 0 ; rising edge of LRCK

wait_Lch:
    jmp x-- wait_Lch

.wrap_target
bitloop0:
    out pins, 1 [1]
.wrap


% c-sdk {

static inline void audio_i2s_program_init(PIO pio, uint sm, uint offset, uint data_pin, uint clock_pin_base, uint lrck_setting) {
    pio_sm_config sm_config = audio_i2s_program_get_default_config(offset);
    
    sm_config_set_out_pins(&sm_config, data_pin, 1);
    sm_config_set_in_pins(&sm_config, clock_pin_base);
    sm_config_set_out_shift(&sm_config, true, true, 16);

    sm_config_set_fifo_join(&sm_config, PIO_FIFO_JOIN_TX);

    pio_sm_init(pio, sm, offset, &sm_config);

    pio_sm_set_consecutive_pindirs(pio, sm, clock_pin_base, 1, false);
    pio_sm_set_consecutive_pindirs(pio, sm, data_pin, 1, true);

    // set resolution to ISR (use as config value)
    pio_sm_set_enabled(pio, sm, false);
    pio_sm_put_blocking(pio, sm, lrck_setting);
    pio_sm_exec(pio, sm, pio_encode_pull(false, false));
    pio_sm_exec(pio, sm, pio_encode_out(pio_isr, 64));
}

%}